// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Ogp is an object representing the database table.
type Ogp struct {
	Date    time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	FQDN    string    `boil:"fqdn" json:"fqdn" toml:"fqdn" yaml:"fqdn"`
	Host    string    `boil:"host" json:"host" toml:"host" yaml:"host"`
	TweetID int64     `boil:"tweet_id" json:"tweet_id" toml:"tweet_id" yaml:"tweet_id"`
	Type    string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Lang    string    `boil:"lang" json:"lang" toml:"lang" yaml:"lang"`

	R *ogpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ogpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OgpColumns = struct {
	Date    string
	FQDN    string
	Host    string
	TweetID string
	Type    string
	Lang    string
}{
	Date:    "date",
	FQDN:    "fqdn",
	Host:    "host",
	TweetID: "tweet_id",
	Type:    "type",
	Lang:    "lang",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var OgpWhere = struct {
	Date    whereHelpertime_Time
	FQDN    whereHelperstring
	Host    whereHelperstring
	TweetID whereHelperint64
	Type    whereHelperstring
	Lang    whereHelperstring
}{
	Date:    whereHelpertime_Time{field: "`ogp`.`date`"},
	FQDN:    whereHelperstring{field: "`ogp`.`fqdn`"},
	Host:    whereHelperstring{field: "`ogp`.`host`"},
	TweetID: whereHelperint64{field: "`ogp`.`tweet_id`"},
	Type:    whereHelperstring{field: "`ogp`.`type`"},
	Lang:    whereHelperstring{field: "`ogp`.`lang`"},
}

// OgpRels is where relationship names are stored.
var OgpRels = struct {
}{}

// ogpR is where relationships are stored.
type ogpR struct {
}

// NewStruct creates a new relationship struct
func (*ogpR) NewStruct() *ogpR {
	return &ogpR{}
}

// ogpL is where Load methods for each relationship are stored.
type ogpL struct{}

var (
	ogpAllColumns            = []string{"date", "fqdn", "host", "tweet_id", "type", "lang"}
	ogpColumnsWithoutDefault = []string{"date", "fqdn", "host", "tweet_id", "type", "lang"}
	ogpColumnsWithDefault    = []string{}
	ogpPrimaryKeyColumns     = []string{"date", "fqdn", "host", "tweet_id"}
)

type (
	// OgpSlice is an alias for a slice of pointers to Ogp.
	// This should generally be used opposed to []Ogp.
	OgpSlice []*Ogp
	// OgpHook is the signature for custom Ogp hook methods
	OgpHook func(context.Context, boil.ContextExecutor, *Ogp) error

	ogpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ogpType                 = reflect.TypeOf(&Ogp{})
	ogpMapping              = queries.MakeStructMapping(ogpType)
	ogpPrimaryKeyMapping, _ = queries.BindMapping(ogpType, ogpMapping, ogpPrimaryKeyColumns)
	ogpInsertCacheMut       sync.RWMutex
	ogpInsertCache          = make(map[string]insertCache)
	ogpUpdateCacheMut       sync.RWMutex
	ogpUpdateCache          = make(map[string]updateCache)
	ogpUpsertCacheMut       sync.RWMutex
	ogpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ogpBeforeInsertHooks []OgpHook
var ogpBeforeUpdateHooks []OgpHook
var ogpBeforeDeleteHooks []OgpHook
var ogpBeforeUpsertHooks []OgpHook

var ogpAfterInsertHooks []OgpHook
var ogpAfterSelectHooks []OgpHook
var ogpAfterUpdateHooks []OgpHook
var ogpAfterDeleteHooks []OgpHook
var ogpAfterUpsertHooks []OgpHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ogp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ogp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ogp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ogp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ogp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ogp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ogp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ogp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ogp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ogpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOgpHook registers your hook function for all future operations.
func AddOgpHook(hookPoint boil.HookPoint, ogpHook OgpHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ogpBeforeInsertHooks = append(ogpBeforeInsertHooks, ogpHook)
	case boil.BeforeUpdateHook:
		ogpBeforeUpdateHooks = append(ogpBeforeUpdateHooks, ogpHook)
	case boil.BeforeDeleteHook:
		ogpBeforeDeleteHooks = append(ogpBeforeDeleteHooks, ogpHook)
	case boil.BeforeUpsertHook:
		ogpBeforeUpsertHooks = append(ogpBeforeUpsertHooks, ogpHook)
	case boil.AfterInsertHook:
		ogpAfterInsertHooks = append(ogpAfterInsertHooks, ogpHook)
	case boil.AfterSelectHook:
		ogpAfterSelectHooks = append(ogpAfterSelectHooks, ogpHook)
	case boil.AfterUpdateHook:
		ogpAfterUpdateHooks = append(ogpAfterUpdateHooks, ogpHook)
	case boil.AfterDeleteHook:
		ogpAfterDeleteHooks = append(ogpAfterDeleteHooks, ogpHook)
	case boil.AfterUpsertHook:
		ogpAfterUpsertHooks = append(ogpAfterUpsertHooks, ogpHook)
	}
}

// One returns a single ogp record from the query.
func (q ogpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ogp, error) {
	o := &Ogp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ogp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ogp records from the query.
func (q ogpQuery) All(ctx context.Context, exec boil.ContextExecutor) (OgpSlice, error) {
	var o []*Ogp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ogp slice")
	}

	if len(ogpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ogp records in the query.
func (q ogpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ogp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ogpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ogp exists")
	}

	return count > 0, nil
}

// Ogps retrieves all the records using an executor.
func Ogps(mods ...qm.QueryMod) ogpQuery {
	mods = append(mods, qm.From("`ogp`"))
	return ogpQuery{NewQuery(mods...)}
}

// FindOgp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOgp(ctx context.Context, exec boil.ContextExecutor, date time.Time, fQDN string, host string, tweetID int64, selectCols ...string) (*Ogp, error) {
	ogpObj := &Ogp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ogp` where `date`=? AND `fqdn`=? AND `host`=? AND `tweet_id`=?", sel,
	)

	q := queries.Raw(query, date, fQDN, host, tweetID)

	err := q.Bind(ctx, exec, ogpObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ogp")
	}

	return ogpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ogp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ogp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ogpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ogpInsertCacheMut.RLock()
	cache, cached := ogpInsertCache[key]
	ogpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ogpAllColumns,
			ogpColumnsWithDefault,
			ogpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ogpType, ogpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ogpType, ogpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ogp` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ogp` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ogp` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ogpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ogp")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Date,
		o.FQDN,
		o.Host,
		o.TweetID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ogp")
	}

CacheNoHooks:
	if !cached {
		ogpInsertCacheMut.Lock()
		ogpInsertCache[key] = cache
		ogpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Ogp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ogp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ogpUpdateCacheMut.RLock()
	cache, cached := ogpUpdateCache[key]
	ogpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ogpAllColumns,
			ogpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ogp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ogp` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ogpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ogpType, ogpMapping, append(wl, ogpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ogp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ogp")
	}

	if !cached {
		ogpUpdateCacheMut.Lock()
		ogpUpdateCache[key] = cache
		ogpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ogpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ogp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ogp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OgpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ogpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ogp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ogpPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ogp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ogp")
	}
	return rowsAff, nil
}

var mySQLOgpUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ogp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ogp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ogpColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOgpUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ogpUpsertCacheMut.RLock()
	cache, cached := ogpUpsertCache[key]
	ogpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ogpAllColumns,
			ogpColumnsWithDefault,
			ogpColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ogpAllColumns,
			ogpPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ogp, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ogp", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ogp` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ogpType, ogpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ogpType, ogpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ogp")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ogpType, ogpMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ogp")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ogp")
	}

CacheNoHooks:
	if !cached {
		ogpUpsertCacheMut.Lock()
		ogpUpsertCache[key] = cache
		ogpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Ogp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ogp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Ogp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ogpPrimaryKeyMapping)
	sql := "DELETE FROM `ogp` WHERE `date`=? AND `fqdn`=? AND `host`=? AND `tweet_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ogp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ogp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ogpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ogpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ogp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ogp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OgpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ogpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ogpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ogp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ogpPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ogp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ogp")
	}

	if len(ogpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ogp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOgp(ctx, exec, o.Date, o.FQDN, o.Host, o.TweetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OgpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OgpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ogpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ogp`.* FROM `ogp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ogpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OgpSlice")
	}

	*o = slice

	return nil
}

// OgpExists checks if the Ogp row exists.
func OgpExists(ctx context.Context, exec boil.ContextExecutor, date time.Time, fQDN string, host string, tweetID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ogp` where `date`=? AND `fqdn`=? AND `host`=? AND `tweet_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date, fQDN, host, tweetID)
	}
	row := exec.QueryRowContext(ctx, sql, date, fQDN, host, tweetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ogp exists")
	}

	return exists, nil
}
